// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client"
  output   = "../app/generated/prisma"
  runtime                = "nodejs"
  moduleFormat           = "esm"
  generatedFileExtension = "ts"
  importFileExtension    = "ts"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}


model Van {
  id String @id @default(cuid())
  name String 
  price Int
  description String
  imageUrl String 
  type Type

  hostId String 
  userInfo UserInfo @relation(fields: [hostId], references: [userId])
}

model Review {
  id String @id @default(cuid())
  createdAt DateTime
  updatedAt DateTime
  
  text String 
  userId String @unique
  rating Int

  user UserInfo @relation(fields: [userId], references: [userId])
}

model Rent {
  id String @id @default(cuid())
  amount Int

  renterId String @unique

  hostId String @unique
  renter  UserInfo @relation("renter", fields: [renterId], references: [userId])
  rented  UserInfo @relation("rented", fields: [hostId],  references: [userId])

  
}


model User {
  id            String    @id
  name          String
  email         String
  emailVerified Boolean
  image         String?
  createdAt     DateTime?
  updatedAt     DateTime?
  Session       Session[]
  Account       Account[]

  role       String?
  banned     Boolean?
  banReason  String?
  banExpires DateTime?

  firstName String?
  lastName  String?
  phone     String?

  

  userInfo UserInfo?

  @@unique([email])
  @@map("user")
}

model UserInfo {
  userId String @unique
  user User @relation(fields: [userId], references: [id])

  vans Van[]
  reviews Review[]
  renter Rent[] @relation("renter")
  rented Rent[] @relation("rented")
}

model Session {
  id        String    @id
  expiresAt DateTime
  token     String
  createdAt DateTime?
  updatedAt DateTime?
  ipAddress String?
  userAgent String?
  userId    String
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  impersonatedBy String?

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime?
  updatedAt             DateTime?

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}

enum Type {
  SIMPLE
  LUXURY
  RUGGED
}