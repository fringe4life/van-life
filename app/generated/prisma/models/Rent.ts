
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/**
 * This file exports the `Rent` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import * as runtime from "@prisma/client/runtime/client"
import type * as $Enums from "../enums.ts"
import type * as Prisma from "../internal/prismaNamespace.ts"

/**
 * Model Rent
 * 
 */
export type RentModel = runtime.Types.Result.DefaultSelection<Prisma.$RentPayload>

export type AggregateRent = {
  _count: RentCountAggregateOutputType | null
  _avg: RentAvgAggregateOutputType | null
  _sum: RentSumAggregateOutputType | null
  _min: RentMinAggregateOutputType | null
  _max: RentMaxAggregateOutputType | null
}

export type RentAvgAggregateOutputType = {
  amount: runtime.Decimal | null
}

export type RentSumAggregateOutputType = {
  amount: runtime.Decimal | null
}

export type RentMinAggregateOutputType = {
  id: string | null
  amount: runtime.Decimal | null
  renterId: string | null
  hostId: string | null
  rentedAt: Date | null
}

export type RentMaxAggregateOutputType = {
  id: string | null
  amount: runtime.Decimal | null
  renterId: string | null
  hostId: string | null
  rentedAt: Date | null
}

export type RentCountAggregateOutputType = {
  id: number
  amount: number
  renterId: number
  hostId: number
  rentedAt: number
  _all: number
}


export type RentAvgAggregateInputType = {
  amount?: true
}

export type RentSumAggregateInputType = {
  amount?: true
}

export type RentMinAggregateInputType = {
  id?: true
  amount?: true
  renterId?: true
  hostId?: true
  rentedAt?: true
}

export type RentMaxAggregateInputType = {
  id?: true
  amount?: true
  renterId?: true
  hostId?: true
  rentedAt?: true
}

export type RentCountAggregateInputType = {
  id?: true
  amount?: true
  renterId?: true
  hostId?: true
  rentedAt?: true
  _all?: true
}

export type RentAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Rent to aggregate.
   */
  where?: Prisma.RentWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Rents to fetch.
   */
  orderBy?: Prisma.RentOrderByWithRelationInput | Prisma.RentOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.RentWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Rents from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Rents.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned Rents
  **/
  _count?: true | RentCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: RentAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: RentSumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: RentMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: RentMaxAggregateInputType
}

export type GetRentAggregateType<T extends RentAggregateArgs> = {
      [P in keyof T & keyof AggregateRent]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateRent[P]>
    : Prisma.GetScalarType<T[P], AggregateRent[P]>
}




export type RentGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.RentWhereInput
  orderBy?: Prisma.RentOrderByWithAggregationInput | Prisma.RentOrderByWithAggregationInput[]
  by: Prisma.RentScalarFieldEnum[] | Prisma.RentScalarFieldEnum
  having?: Prisma.RentScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: RentCountAggregateInputType | true
  _avg?: RentAvgAggregateInputType
  _sum?: RentSumAggregateInputType
  _min?: RentMinAggregateInputType
  _max?: RentMaxAggregateInputType
}

export type RentGroupByOutputType = {
  id: string
  amount: runtime.Decimal
  renterId: string
  hostId: string
  rentedAt: Date
  _count: RentCountAggregateOutputType | null
  _avg: RentAvgAggregateOutputType | null
  _sum: RentSumAggregateOutputType | null
  _min: RentMinAggregateOutputType | null
  _max: RentMaxAggregateOutputType | null
}

type GetRentGroupByPayload<T extends RentGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<RentGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof RentGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], RentGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], RentGroupByOutputType[P]>
      }
    >
  > 



export type RentWhereInput = {
  AND?: Prisma.RentWhereInput | Prisma.RentWhereInput[]
  OR?: Prisma.RentWhereInput[]
  NOT?: Prisma.RentWhereInput | Prisma.RentWhereInput[]
  id?: Prisma.StringFilter<"Rent"> | string
  amount?: Prisma.DecimalFilter<"Rent"> | runtime.Decimal | runtime.DecimalJsLike | number | string
  renterId?: Prisma.StringFilter<"Rent"> | string
  hostId?: Prisma.StringFilter<"Rent"> | string
  rentedAt?: Prisma.DateTimeFilter<"Rent"> | Date | string
  renter?: Prisma.XOR<Prisma.UserInfoScalarRelationFilter, Prisma.UserInfoWhereInput>
  host?: Prisma.XOR<Prisma.UserInfoScalarRelationFilter, Prisma.UserInfoWhereInput>
  reviews?: Prisma.ReviewListRelationFilter
}

export type RentOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  amount?: Prisma.SortOrder
  renterId?: Prisma.SortOrder
  hostId?: Prisma.SortOrder
  rentedAt?: Prisma.SortOrder
  renter?: Prisma.UserInfoOrderByWithRelationInput
  host?: Prisma.UserInfoOrderByWithRelationInput
  reviews?: Prisma.ReviewOrderByRelationAggregateInput
}

export type RentWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  AND?: Prisma.RentWhereInput | Prisma.RentWhereInput[]
  OR?: Prisma.RentWhereInput[]
  NOT?: Prisma.RentWhereInput | Prisma.RentWhereInput[]
  amount?: Prisma.DecimalFilter<"Rent"> | runtime.Decimal | runtime.DecimalJsLike | number | string
  renterId?: Prisma.StringFilter<"Rent"> | string
  hostId?: Prisma.StringFilter<"Rent"> | string
  rentedAt?: Prisma.DateTimeFilter<"Rent"> | Date | string
  renter?: Prisma.XOR<Prisma.UserInfoScalarRelationFilter, Prisma.UserInfoWhereInput>
  host?: Prisma.XOR<Prisma.UserInfoScalarRelationFilter, Prisma.UserInfoWhereInput>
  reviews?: Prisma.ReviewListRelationFilter
}, "id">

export type RentOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  amount?: Prisma.SortOrder
  renterId?: Prisma.SortOrder
  hostId?: Prisma.SortOrder
  rentedAt?: Prisma.SortOrder
  _count?: Prisma.RentCountOrderByAggregateInput
  _avg?: Prisma.RentAvgOrderByAggregateInput
  _max?: Prisma.RentMaxOrderByAggregateInput
  _min?: Prisma.RentMinOrderByAggregateInput
  _sum?: Prisma.RentSumOrderByAggregateInput
}

export type RentScalarWhereWithAggregatesInput = {
  AND?: Prisma.RentScalarWhereWithAggregatesInput | Prisma.RentScalarWhereWithAggregatesInput[]
  OR?: Prisma.RentScalarWhereWithAggregatesInput[]
  NOT?: Prisma.RentScalarWhereWithAggregatesInput | Prisma.RentScalarWhereWithAggregatesInput[]
  id?: Prisma.StringWithAggregatesFilter<"Rent"> | string
  amount?: Prisma.DecimalWithAggregatesFilter<"Rent"> | runtime.Decimal | runtime.DecimalJsLike | number | string
  renterId?: Prisma.StringWithAggregatesFilter<"Rent"> | string
  hostId?: Prisma.StringWithAggregatesFilter<"Rent"> | string
  rentedAt?: Prisma.DateTimeWithAggregatesFilter<"Rent"> | Date | string
}

export type RentCreateInput = {
  id?: string
  amount: runtime.Decimal | runtime.DecimalJsLike | number | string
  rentedAt?: Date | string
  renter: Prisma.UserInfoCreateNestedOneWithoutRenterInput
  host: Prisma.UserInfoCreateNestedOneWithoutRentedInput
  reviews?: Prisma.ReviewCreateNestedManyWithoutRenterInput
}

export type RentUncheckedCreateInput = {
  id?: string
  amount: runtime.Decimal | runtime.DecimalJsLike | number | string
  renterId: string
  hostId: string
  rentedAt?: Date | string
  reviews?: Prisma.ReviewUncheckedCreateNestedManyWithoutRenterInput
}

export type RentUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  amount?: Prisma.DecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string
  rentedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  renter?: Prisma.UserInfoUpdateOneRequiredWithoutRenterNestedInput
  host?: Prisma.UserInfoUpdateOneRequiredWithoutRentedNestedInput
  reviews?: Prisma.ReviewUpdateManyWithoutRenterNestedInput
}

export type RentUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  amount?: Prisma.DecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string
  renterId?: Prisma.StringFieldUpdateOperationsInput | string
  hostId?: Prisma.StringFieldUpdateOperationsInput | string
  rentedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  reviews?: Prisma.ReviewUncheckedUpdateManyWithoutRenterNestedInput
}

export type RentCreateManyInput = {
  id?: string
  amount: runtime.Decimal | runtime.DecimalJsLike | number | string
  renterId: string
  hostId: string
  rentedAt?: Date | string
}

export type RentUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  amount?: Prisma.DecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string
  rentedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type RentUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  amount?: Prisma.DecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string
  renterId?: Prisma.StringFieldUpdateOperationsInput | string
  hostId?: Prisma.StringFieldUpdateOperationsInput | string
  rentedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type RentCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  amount?: Prisma.SortOrder
  renterId?: Prisma.SortOrder
  hostId?: Prisma.SortOrder
  rentedAt?: Prisma.SortOrder
}

export type RentAvgOrderByAggregateInput = {
  amount?: Prisma.SortOrder
}

export type RentMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  amount?: Prisma.SortOrder
  renterId?: Prisma.SortOrder
  hostId?: Prisma.SortOrder
  rentedAt?: Prisma.SortOrder
}

export type RentMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  amount?: Prisma.SortOrder
  renterId?: Prisma.SortOrder
  hostId?: Prisma.SortOrder
  rentedAt?: Prisma.SortOrder
}

export type RentSumOrderByAggregateInput = {
  amount?: Prisma.SortOrder
}

export type RentScalarRelationFilter = {
  is?: Prisma.RentWhereInput
  isNot?: Prisma.RentWhereInput
}

export type RentListRelationFilter = {
  every?: Prisma.RentWhereInput
  some?: Prisma.RentWhereInput
  none?: Prisma.RentWhereInput
}

export type RentOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type DecimalFieldUpdateOperationsInput = {
  set?: runtime.Decimal | runtime.DecimalJsLike | number | string
  increment?: runtime.Decimal | runtime.DecimalJsLike | number | string
  decrement?: runtime.Decimal | runtime.DecimalJsLike | number | string
  multiply?: runtime.Decimal | runtime.DecimalJsLike | number | string
  divide?: runtime.Decimal | runtime.DecimalJsLike | number | string
}

export type RentCreateNestedOneWithoutReviewsInput = {
  create?: Prisma.XOR<Prisma.RentCreateWithoutReviewsInput, Prisma.RentUncheckedCreateWithoutReviewsInput>
  connectOrCreate?: Prisma.RentCreateOrConnectWithoutReviewsInput
  connect?: Prisma.RentWhereUniqueInput
}

export type RentUpdateOneRequiredWithoutReviewsNestedInput = {
  create?: Prisma.XOR<Prisma.RentCreateWithoutReviewsInput, Prisma.RentUncheckedCreateWithoutReviewsInput>
  connectOrCreate?: Prisma.RentCreateOrConnectWithoutReviewsInput
  upsert?: Prisma.RentUpsertWithoutReviewsInput
  connect?: Prisma.RentWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.RentUpdateToOneWithWhereWithoutReviewsInput, Prisma.RentUpdateWithoutReviewsInput>, Prisma.RentUncheckedUpdateWithoutReviewsInput>
}

export type RentCreateNestedManyWithoutRenterInput = {
  create?: Prisma.XOR<Prisma.RentCreateWithoutRenterInput, Prisma.RentUncheckedCreateWithoutRenterInput> | Prisma.RentCreateWithoutRenterInput[] | Prisma.RentUncheckedCreateWithoutRenterInput[]
  connectOrCreate?: Prisma.RentCreateOrConnectWithoutRenterInput | Prisma.RentCreateOrConnectWithoutRenterInput[]
  createMany?: Prisma.RentCreateManyRenterInputEnvelope
  connect?: Prisma.RentWhereUniqueInput | Prisma.RentWhereUniqueInput[]
}

export type RentCreateNestedManyWithoutHostInput = {
  create?: Prisma.XOR<Prisma.RentCreateWithoutHostInput, Prisma.RentUncheckedCreateWithoutHostInput> | Prisma.RentCreateWithoutHostInput[] | Prisma.RentUncheckedCreateWithoutHostInput[]
  connectOrCreate?: Prisma.RentCreateOrConnectWithoutHostInput | Prisma.RentCreateOrConnectWithoutHostInput[]
  createMany?: Prisma.RentCreateManyHostInputEnvelope
  connect?: Prisma.RentWhereUniqueInput | Prisma.RentWhereUniqueInput[]
}

export type RentUncheckedCreateNestedManyWithoutRenterInput = {
  create?: Prisma.XOR<Prisma.RentCreateWithoutRenterInput, Prisma.RentUncheckedCreateWithoutRenterInput> | Prisma.RentCreateWithoutRenterInput[] | Prisma.RentUncheckedCreateWithoutRenterInput[]
  connectOrCreate?: Prisma.RentCreateOrConnectWithoutRenterInput | Prisma.RentCreateOrConnectWithoutRenterInput[]
  createMany?: Prisma.RentCreateManyRenterInputEnvelope
  connect?: Prisma.RentWhereUniqueInput | Prisma.RentWhereUniqueInput[]
}

export type RentUncheckedCreateNestedManyWithoutHostInput = {
  create?: Prisma.XOR<Prisma.RentCreateWithoutHostInput, Prisma.RentUncheckedCreateWithoutHostInput> | Prisma.RentCreateWithoutHostInput[] | Prisma.RentUncheckedCreateWithoutHostInput[]
  connectOrCreate?: Prisma.RentCreateOrConnectWithoutHostInput | Prisma.RentCreateOrConnectWithoutHostInput[]
  createMany?: Prisma.RentCreateManyHostInputEnvelope
  connect?: Prisma.RentWhereUniqueInput | Prisma.RentWhereUniqueInput[]
}

export type RentUpdateManyWithoutRenterNestedInput = {
  create?: Prisma.XOR<Prisma.RentCreateWithoutRenterInput, Prisma.RentUncheckedCreateWithoutRenterInput> | Prisma.RentCreateWithoutRenterInput[] | Prisma.RentUncheckedCreateWithoutRenterInput[]
  connectOrCreate?: Prisma.RentCreateOrConnectWithoutRenterInput | Prisma.RentCreateOrConnectWithoutRenterInput[]
  upsert?: Prisma.RentUpsertWithWhereUniqueWithoutRenterInput | Prisma.RentUpsertWithWhereUniqueWithoutRenterInput[]
  createMany?: Prisma.RentCreateManyRenterInputEnvelope
  set?: Prisma.RentWhereUniqueInput | Prisma.RentWhereUniqueInput[]
  disconnect?: Prisma.RentWhereUniqueInput | Prisma.RentWhereUniqueInput[]
  delete?: Prisma.RentWhereUniqueInput | Prisma.RentWhereUniqueInput[]
  connect?: Prisma.RentWhereUniqueInput | Prisma.RentWhereUniqueInput[]
  update?: Prisma.RentUpdateWithWhereUniqueWithoutRenterInput | Prisma.RentUpdateWithWhereUniqueWithoutRenterInput[]
  updateMany?: Prisma.RentUpdateManyWithWhereWithoutRenterInput | Prisma.RentUpdateManyWithWhereWithoutRenterInput[]
  deleteMany?: Prisma.RentScalarWhereInput | Prisma.RentScalarWhereInput[]
}

export type RentUpdateManyWithoutHostNestedInput = {
  create?: Prisma.XOR<Prisma.RentCreateWithoutHostInput, Prisma.RentUncheckedCreateWithoutHostInput> | Prisma.RentCreateWithoutHostInput[] | Prisma.RentUncheckedCreateWithoutHostInput[]
  connectOrCreate?: Prisma.RentCreateOrConnectWithoutHostInput | Prisma.RentCreateOrConnectWithoutHostInput[]
  upsert?: Prisma.RentUpsertWithWhereUniqueWithoutHostInput | Prisma.RentUpsertWithWhereUniqueWithoutHostInput[]
  createMany?: Prisma.RentCreateManyHostInputEnvelope
  set?: Prisma.RentWhereUniqueInput | Prisma.RentWhereUniqueInput[]
  disconnect?: Prisma.RentWhereUniqueInput | Prisma.RentWhereUniqueInput[]
  delete?: Prisma.RentWhereUniqueInput | Prisma.RentWhereUniqueInput[]
  connect?: Prisma.RentWhereUniqueInput | Prisma.RentWhereUniqueInput[]
  update?: Prisma.RentUpdateWithWhereUniqueWithoutHostInput | Prisma.RentUpdateWithWhereUniqueWithoutHostInput[]
  updateMany?: Prisma.RentUpdateManyWithWhereWithoutHostInput | Prisma.RentUpdateManyWithWhereWithoutHostInput[]
  deleteMany?: Prisma.RentScalarWhereInput | Prisma.RentScalarWhereInput[]
}

export type RentUncheckedUpdateManyWithoutRenterNestedInput = {
  create?: Prisma.XOR<Prisma.RentCreateWithoutRenterInput, Prisma.RentUncheckedCreateWithoutRenterInput> | Prisma.RentCreateWithoutRenterInput[] | Prisma.RentUncheckedCreateWithoutRenterInput[]
  connectOrCreate?: Prisma.RentCreateOrConnectWithoutRenterInput | Prisma.RentCreateOrConnectWithoutRenterInput[]
  upsert?: Prisma.RentUpsertWithWhereUniqueWithoutRenterInput | Prisma.RentUpsertWithWhereUniqueWithoutRenterInput[]
  createMany?: Prisma.RentCreateManyRenterInputEnvelope
  set?: Prisma.RentWhereUniqueInput | Prisma.RentWhereUniqueInput[]
  disconnect?: Prisma.RentWhereUniqueInput | Prisma.RentWhereUniqueInput[]
  delete?: Prisma.RentWhereUniqueInput | Prisma.RentWhereUniqueInput[]
  connect?: Prisma.RentWhereUniqueInput | Prisma.RentWhereUniqueInput[]
  update?: Prisma.RentUpdateWithWhereUniqueWithoutRenterInput | Prisma.RentUpdateWithWhereUniqueWithoutRenterInput[]
  updateMany?: Prisma.RentUpdateManyWithWhereWithoutRenterInput | Prisma.RentUpdateManyWithWhereWithoutRenterInput[]
  deleteMany?: Prisma.RentScalarWhereInput | Prisma.RentScalarWhereInput[]
}

export type RentUncheckedUpdateManyWithoutHostNestedInput = {
  create?: Prisma.XOR<Prisma.RentCreateWithoutHostInput, Prisma.RentUncheckedCreateWithoutHostInput> | Prisma.RentCreateWithoutHostInput[] | Prisma.RentUncheckedCreateWithoutHostInput[]
  connectOrCreate?: Prisma.RentCreateOrConnectWithoutHostInput | Prisma.RentCreateOrConnectWithoutHostInput[]
  upsert?: Prisma.RentUpsertWithWhereUniqueWithoutHostInput | Prisma.RentUpsertWithWhereUniqueWithoutHostInput[]
  createMany?: Prisma.RentCreateManyHostInputEnvelope
  set?: Prisma.RentWhereUniqueInput | Prisma.RentWhereUniqueInput[]
  disconnect?: Prisma.RentWhereUniqueInput | Prisma.RentWhereUniqueInput[]
  delete?: Prisma.RentWhereUniqueInput | Prisma.RentWhereUniqueInput[]
  connect?: Prisma.RentWhereUniqueInput | Prisma.RentWhereUniqueInput[]
  update?: Prisma.RentUpdateWithWhereUniqueWithoutHostInput | Prisma.RentUpdateWithWhereUniqueWithoutHostInput[]
  updateMany?: Prisma.RentUpdateManyWithWhereWithoutHostInput | Prisma.RentUpdateManyWithWhereWithoutHostInput[]
  deleteMany?: Prisma.RentScalarWhereInput | Prisma.RentScalarWhereInput[]
}

export type RentCreateWithoutReviewsInput = {
  id?: string
  amount: runtime.Decimal | runtime.DecimalJsLike | number | string
  rentedAt?: Date | string
  renter: Prisma.UserInfoCreateNestedOneWithoutRenterInput
  host: Prisma.UserInfoCreateNestedOneWithoutRentedInput
}

export type RentUncheckedCreateWithoutReviewsInput = {
  id?: string
  amount: runtime.Decimal | runtime.DecimalJsLike | number | string
  renterId: string
  hostId: string
  rentedAt?: Date | string
}

export type RentCreateOrConnectWithoutReviewsInput = {
  where: Prisma.RentWhereUniqueInput
  create: Prisma.XOR<Prisma.RentCreateWithoutReviewsInput, Prisma.RentUncheckedCreateWithoutReviewsInput>
}

export type RentUpsertWithoutReviewsInput = {
  update: Prisma.XOR<Prisma.RentUpdateWithoutReviewsInput, Prisma.RentUncheckedUpdateWithoutReviewsInput>
  create: Prisma.XOR<Prisma.RentCreateWithoutReviewsInput, Prisma.RentUncheckedCreateWithoutReviewsInput>
  where?: Prisma.RentWhereInput
}

export type RentUpdateToOneWithWhereWithoutReviewsInput = {
  where?: Prisma.RentWhereInput
  data: Prisma.XOR<Prisma.RentUpdateWithoutReviewsInput, Prisma.RentUncheckedUpdateWithoutReviewsInput>
}

export type RentUpdateWithoutReviewsInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  amount?: Prisma.DecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string
  rentedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  renter?: Prisma.UserInfoUpdateOneRequiredWithoutRenterNestedInput
  host?: Prisma.UserInfoUpdateOneRequiredWithoutRentedNestedInput
}

export type RentUncheckedUpdateWithoutReviewsInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  amount?: Prisma.DecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string
  renterId?: Prisma.StringFieldUpdateOperationsInput | string
  hostId?: Prisma.StringFieldUpdateOperationsInput | string
  rentedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type RentCreateWithoutRenterInput = {
  id?: string
  amount: runtime.Decimal | runtime.DecimalJsLike | number | string
  rentedAt?: Date | string
  host: Prisma.UserInfoCreateNestedOneWithoutRentedInput
  reviews?: Prisma.ReviewCreateNestedManyWithoutRenterInput
}

export type RentUncheckedCreateWithoutRenterInput = {
  id?: string
  amount: runtime.Decimal | runtime.DecimalJsLike | number | string
  hostId: string
  rentedAt?: Date | string
  reviews?: Prisma.ReviewUncheckedCreateNestedManyWithoutRenterInput
}

export type RentCreateOrConnectWithoutRenterInput = {
  where: Prisma.RentWhereUniqueInput
  create: Prisma.XOR<Prisma.RentCreateWithoutRenterInput, Prisma.RentUncheckedCreateWithoutRenterInput>
}

export type RentCreateManyRenterInputEnvelope = {
  data: Prisma.RentCreateManyRenterInput | Prisma.RentCreateManyRenterInput[]
  skipDuplicates?: boolean
}

export type RentCreateWithoutHostInput = {
  id?: string
  amount: runtime.Decimal | runtime.DecimalJsLike | number | string
  rentedAt?: Date | string
  renter: Prisma.UserInfoCreateNestedOneWithoutRenterInput
  reviews?: Prisma.ReviewCreateNestedManyWithoutRenterInput
}

export type RentUncheckedCreateWithoutHostInput = {
  id?: string
  amount: runtime.Decimal | runtime.DecimalJsLike | number | string
  renterId: string
  rentedAt?: Date | string
  reviews?: Prisma.ReviewUncheckedCreateNestedManyWithoutRenterInput
}

export type RentCreateOrConnectWithoutHostInput = {
  where: Prisma.RentWhereUniqueInput
  create: Prisma.XOR<Prisma.RentCreateWithoutHostInput, Prisma.RentUncheckedCreateWithoutHostInput>
}

export type RentCreateManyHostInputEnvelope = {
  data: Prisma.RentCreateManyHostInput | Prisma.RentCreateManyHostInput[]
  skipDuplicates?: boolean
}

export type RentUpsertWithWhereUniqueWithoutRenterInput = {
  where: Prisma.RentWhereUniqueInput
  update: Prisma.XOR<Prisma.RentUpdateWithoutRenterInput, Prisma.RentUncheckedUpdateWithoutRenterInput>
  create: Prisma.XOR<Prisma.RentCreateWithoutRenterInput, Prisma.RentUncheckedCreateWithoutRenterInput>
}

export type RentUpdateWithWhereUniqueWithoutRenterInput = {
  where: Prisma.RentWhereUniqueInput
  data: Prisma.XOR<Prisma.RentUpdateWithoutRenterInput, Prisma.RentUncheckedUpdateWithoutRenterInput>
}

export type RentUpdateManyWithWhereWithoutRenterInput = {
  where: Prisma.RentScalarWhereInput
  data: Prisma.XOR<Prisma.RentUpdateManyMutationInput, Prisma.RentUncheckedUpdateManyWithoutRenterInput>
}

export type RentScalarWhereInput = {
  AND?: Prisma.RentScalarWhereInput | Prisma.RentScalarWhereInput[]
  OR?: Prisma.RentScalarWhereInput[]
  NOT?: Prisma.RentScalarWhereInput | Prisma.RentScalarWhereInput[]
  id?: Prisma.StringFilter<"Rent"> | string
  amount?: Prisma.DecimalFilter<"Rent"> | runtime.Decimal | runtime.DecimalJsLike | number | string
  renterId?: Prisma.StringFilter<"Rent"> | string
  hostId?: Prisma.StringFilter<"Rent"> | string
  rentedAt?: Prisma.DateTimeFilter<"Rent"> | Date | string
}

export type RentUpsertWithWhereUniqueWithoutHostInput = {
  where: Prisma.RentWhereUniqueInput
  update: Prisma.XOR<Prisma.RentUpdateWithoutHostInput, Prisma.RentUncheckedUpdateWithoutHostInput>
  create: Prisma.XOR<Prisma.RentCreateWithoutHostInput, Prisma.RentUncheckedCreateWithoutHostInput>
}

export type RentUpdateWithWhereUniqueWithoutHostInput = {
  where: Prisma.RentWhereUniqueInput
  data: Prisma.XOR<Prisma.RentUpdateWithoutHostInput, Prisma.RentUncheckedUpdateWithoutHostInput>
}

export type RentUpdateManyWithWhereWithoutHostInput = {
  where: Prisma.RentScalarWhereInput
  data: Prisma.XOR<Prisma.RentUpdateManyMutationInput, Prisma.RentUncheckedUpdateManyWithoutHostInput>
}

export type RentCreateManyRenterInput = {
  id?: string
  amount: runtime.Decimal | runtime.DecimalJsLike | number | string
  hostId: string
  rentedAt?: Date | string
}

export type RentCreateManyHostInput = {
  id?: string
  amount: runtime.Decimal | runtime.DecimalJsLike | number | string
  renterId: string
  rentedAt?: Date | string
}

export type RentUpdateWithoutRenterInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  amount?: Prisma.DecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string
  rentedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  host?: Prisma.UserInfoUpdateOneRequiredWithoutRentedNestedInput
  reviews?: Prisma.ReviewUpdateManyWithoutRenterNestedInput
}

export type RentUncheckedUpdateWithoutRenterInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  amount?: Prisma.DecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string
  hostId?: Prisma.StringFieldUpdateOperationsInput | string
  rentedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  reviews?: Prisma.ReviewUncheckedUpdateManyWithoutRenterNestedInput
}

export type RentUncheckedUpdateManyWithoutRenterInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  amount?: Prisma.DecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string
  hostId?: Prisma.StringFieldUpdateOperationsInput | string
  rentedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type RentUpdateWithoutHostInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  amount?: Prisma.DecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string
  rentedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  renter?: Prisma.UserInfoUpdateOneRequiredWithoutRenterNestedInput
  reviews?: Prisma.ReviewUpdateManyWithoutRenterNestedInput
}

export type RentUncheckedUpdateWithoutHostInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  amount?: Prisma.DecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string
  renterId?: Prisma.StringFieldUpdateOperationsInput | string
  rentedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  reviews?: Prisma.ReviewUncheckedUpdateManyWithoutRenterNestedInput
}

export type RentUncheckedUpdateManyWithoutHostInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  amount?: Prisma.DecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string
  renterId?: Prisma.StringFieldUpdateOperationsInput | string
  rentedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}


/**
 * Count Type RentCountOutputType
 */

export type RentCountOutputType = {
  reviews: number
}

export type RentCountOutputTypeSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  reviews?: boolean | RentCountOutputTypeCountReviewsArgs
}

/**
 * RentCountOutputType without action
 */
export type RentCountOutputTypeDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the RentCountOutputType
   */
  select?: Prisma.RentCountOutputTypeSelect<ExtArgs> | null
}

/**
 * RentCountOutputType without action
 */
export type RentCountOutputTypeCountReviewsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.ReviewWhereInput
}


export type RentSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  amount?: boolean
  renterId?: boolean
  hostId?: boolean
  rentedAt?: boolean
  renter?: boolean | Prisma.UserInfoDefaultArgs<ExtArgs>
  host?: boolean | Prisma.UserInfoDefaultArgs<ExtArgs>
  reviews?: boolean | Prisma.Rent$reviewsArgs<ExtArgs>
  _count?: boolean | Prisma.RentCountOutputTypeDefaultArgs<ExtArgs>
}, ExtArgs["result"]["rent"]>

export type RentSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  amount?: boolean
  renterId?: boolean
  hostId?: boolean
  rentedAt?: boolean
  renter?: boolean | Prisma.UserInfoDefaultArgs<ExtArgs>
  host?: boolean | Prisma.UserInfoDefaultArgs<ExtArgs>
}, ExtArgs["result"]["rent"]>

export type RentSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  amount?: boolean
  renterId?: boolean
  hostId?: boolean
  rentedAt?: boolean
  renter?: boolean | Prisma.UserInfoDefaultArgs<ExtArgs>
  host?: boolean | Prisma.UserInfoDefaultArgs<ExtArgs>
}, ExtArgs["result"]["rent"]>

export type RentSelectScalar = {
  id?: boolean
  amount?: boolean
  renterId?: boolean
  hostId?: boolean
  rentedAt?: boolean
}

export type RentOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "amount" | "renterId" | "hostId" | "rentedAt", ExtArgs["result"]["rent"]>
export type RentInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  renter?: boolean | Prisma.UserInfoDefaultArgs<ExtArgs>
  host?: boolean | Prisma.UserInfoDefaultArgs<ExtArgs>
  reviews?: boolean | Prisma.Rent$reviewsArgs<ExtArgs>
  _count?: boolean | Prisma.RentCountOutputTypeDefaultArgs<ExtArgs>
}
export type RentIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  renter?: boolean | Prisma.UserInfoDefaultArgs<ExtArgs>
  host?: boolean | Prisma.UserInfoDefaultArgs<ExtArgs>
}
export type RentIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  renter?: boolean | Prisma.UserInfoDefaultArgs<ExtArgs>
  host?: boolean | Prisma.UserInfoDefaultArgs<ExtArgs>
}

export type $RentPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "Rent"
  objects: {
    renter: Prisma.$UserInfoPayload<ExtArgs>
    host: Prisma.$UserInfoPayload<ExtArgs>
    reviews: Prisma.$ReviewPayload<ExtArgs>[]
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    amount: runtime.Decimal
    renterId: string
    hostId: string
    rentedAt: Date
  }, ExtArgs["result"]["rent"]>
  composites: {}
}

export type RentGetPayload<S extends boolean | null | undefined | RentDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$RentPayload, S>

export type RentCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<RentFindManyArgs, 'select' | 'include' | 'distinct' | 'omit' | 'relationLoadStrategy'> & {
    select?: RentCountAggregateInputType | true
  }

export interface RentDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Rent'], meta: { name: 'Rent' } }
  /**
   * Find zero or one Rent that matches the filter.
   * @param {RentFindUniqueArgs} args - Arguments to find a Rent
   * @example
   * // Get one Rent
   * const rent = await prisma.rent.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends RentFindUniqueArgs>(args: Prisma.SelectSubset<T, RentFindUniqueArgs<ExtArgs>>): Prisma.Prisma__RentClient<runtime.Types.Result.GetResult<Prisma.$RentPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one Rent that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {RentFindUniqueOrThrowArgs} args - Arguments to find a Rent
   * @example
   * // Get one Rent
   * const rent = await prisma.rent.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends RentFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, RentFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__RentClient<runtime.Types.Result.GetResult<Prisma.$RentPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Rent that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {RentFindFirstArgs} args - Arguments to find a Rent
   * @example
   * // Get one Rent
   * const rent = await prisma.rent.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends RentFindFirstArgs>(args?: Prisma.SelectSubset<T, RentFindFirstArgs<ExtArgs>>): Prisma.Prisma__RentClient<runtime.Types.Result.GetResult<Prisma.$RentPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Rent that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {RentFindFirstOrThrowArgs} args - Arguments to find a Rent
   * @example
   * // Get one Rent
   * const rent = await prisma.rent.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends RentFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, RentFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__RentClient<runtime.Types.Result.GetResult<Prisma.$RentPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more Rents that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {RentFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Rents
   * const rents = await prisma.rent.findMany()
   * 
   * // Get first 10 Rents
   * const rents = await prisma.rent.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const rentWithIdOnly = await prisma.rent.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends RentFindManyArgs>(args?: Prisma.SelectSubset<T, RentFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$RentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a Rent.
   * @param {RentCreateArgs} args - Arguments to create a Rent.
   * @example
   * // Create one Rent
   * const Rent = await prisma.rent.create({
   *   data: {
   *     // ... data to create a Rent
   *   }
   * })
   * 
   */
  create<T extends RentCreateArgs>(args: Prisma.SelectSubset<T, RentCreateArgs<ExtArgs>>): Prisma.Prisma__RentClient<runtime.Types.Result.GetResult<Prisma.$RentPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many Rents.
   * @param {RentCreateManyArgs} args - Arguments to create many Rents.
   * @example
   * // Create many Rents
   * const rent = await prisma.rent.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends RentCreateManyArgs>(args?: Prisma.SelectSubset<T, RentCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many Rents and returns the data saved in the database.
   * @param {RentCreateManyAndReturnArgs} args - Arguments to create many Rents.
   * @example
   * // Create many Rents
   * const rent = await prisma.rent.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many Rents and only return the `id`
   * const rentWithIdOnly = await prisma.rent.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends RentCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, RentCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$RentPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a Rent.
   * @param {RentDeleteArgs} args - Arguments to delete one Rent.
   * @example
   * // Delete one Rent
   * const Rent = await prisma.rent.delete({
   *   where: {
   *     // ... filter to delete one Rent
   *   }
   * })
   * 
   */
  delete<T extends RentDeleteArgs>(args: Prisma.SelectSubset<T, RentDeleteArgs<ExtArgs>>): Prisma.Prisma__RentClient<runtime.Types.Result.GetResult<Prisma.$RentPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one Rent.
   * @param {RentUpdateArgs} args - Arguments to update one Rent.
   * @example
   * // Update one Rent
   * const rent = await prisma.rent.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends RentUpdateArgs>(args: Prisma.SelectSubset<T, RentUpdateArgs<ExtArgs>>): Prisma.Prisma__RentClient<runtime.Types.Result.GetResult<Prisma.$RentPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more Rents.
   * @param {RentDeleteManyArgs} args - Arguments to filter Rents to delete.
   * @example
   * // Delete a few Rents
   * const { count } = await prisma.rent.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends RentDeleteManyArgs>(args?: Prisma.SelectSubset<T, RentDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Rents.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {RentUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Rents
   * const rent = await prisma.rent.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends RentUpdateManyArgs>(args: Prisma.SelectSubset<T, RentUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Rents and returns the data updated in the database.
   * @param {RentUpdateManyAndReturnArgs} args - Arguments to update many Rents.
   * @example
   * // Update many Rents
   * const rent = await prisma.rent.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more Rents and only return the `id`
   * const rentWithIdOnly = await prisma.rent.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends RentUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, RentUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$RentPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one Rent.
   * @param {RentUpsertArgs} args - Arguments to update or create a Rent.
   * @example
   * // Update or create a Rent
   * const rent = await prisma.rent.upsert({
   *   create: {
   *     // ... data to create a Rent
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Rent we want to update
   *   }
   * })
   */
  upsert<T extends RentUpsertArgs>(args: Prisma.SelectSubset<T, RentUpsertArgs<ExtArgs>>): Prisma.Prisma__RentClient<runtime.Types.Result.GetResult<Prisma.$RentPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of Rents.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {RentCountArgs} args - Arguments to filter Rents to count.
   * @example
   * // Count the number of Rents
   * const count = await prisma.rent.count({
   *   where: {
   *     // ... the filter for the Rents we want to count
   *   }
   * })
  **/
  count<T extends RentCountArgs>(
    args?: Prisma.Subset<T, RentCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], RentCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a Rent.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {RentAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends RentAggregateArgs>(args: Prisma.Subset<T, RentAggregateArgs>): Prisma.PrismaPromise<GetRentAggregateType<T>>

  /**
   * Group by Rent.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {RentGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends RentGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: RentGroupByArgs['orderBy'] }
      : { orderBy?: RentGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, RentGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetRentGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the Rent model
 */
readonly fields: RentFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for Rent.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__RentClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  renter<T extends Prisma.UserInfoDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.UserInfoDefaultArgs<ExtArgs>>): Prisma.Prisma__UserInfoClient<runtime.Types.Result.GetResult<Prisma.$UserInfoPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  host<T extends Prisma.UserInfoDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.UserInfoDefaultArgs<ExtArgs>>): Prisma.Prisma__UserInfoClient<runtime.Types.Result.GetResult<Prisma.$UserInfoPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  reviews<T extends Prisma.Rent$reviewsArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.Rent$reviewsArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ReviewPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the Rent model
 */
export interface RentFieldRefs {
  readonly id: Prisma.FieldRef<"Rent", 'String'>
  readonly amount: Prisma.FieldRef<"Rent", 'Decimal'>
  readonly renterId: Prisma.FieldRef<"Rent", 'String'>
  readonly hostId: Prisma.FieldRef<"Rent", 'String'>
  readonly rentedAt: Prisma.FieldRef<"Rent", 'DateTime'>
}
    

// Custom InputTypes
/**
 * Rent findUnique
 */
export type RentFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Rent
   */
  select?: Prisma.RentSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Rent
   */
  omit?: Prisma.RentOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.RentInclude<ExtArgs> | null
  /**
   * Filter, which Rent to fetch.
   */
  where: Prisma.RentWhereUniqueInput
  relationLoadStrategy?: Prisma.RelationLoadStrategy
}

/**
 * Rent findUniqueOrThrow
 */
export type RentFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Rent
   */
  select?: Prisma.RentSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Rent
   */
  omit?: Prisma.RentOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.RentInclude<ExtArgs> | null
  /**
   * Filter, which Rent to fetch.
   */
  where: Prisma.RentWhereUniqueInput
  relationLoadStrategy?: Prisma.RelationLoadStrategy
}

/**
 * Rent findFirst
 */
export type RentFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Rent
   */
  select?: Prisma.RentSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Rent
   */
  omit?: Prisma.RentOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.RentInclude<ExtArgs> | null
  /**
   * Filter, which Rent to fetch.
   */
  where?: Prisma.RentWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Rents to fetch.
   */
  orderBy?: Prisma.RentOrderByWithRelationInput | Prisma.RentOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Rents.
   */
  cursor?: Prisma.RentWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Rents from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Rents.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Rents.
   */
  distinct?: Prisma.RentScalarFieldEnum | Prisma.RentScalarFieldEnum[]
  relationLoadStrategy?: Prisma.RelationLoadStrategy
}

/**
 * Rent findFirstOrThrow
 */
export type RentFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Rent
   */
  select?: Prisma.RentSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Rent
   */
  omit?: Prisma.RentOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.RentInclude<ExtArgs> | null
  /**
   * Filter, which Rent to fetch.
   */
  where?: Prisma.RentWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Rents to fetch.
   */
  orderBy?: Prisma.RentOrderByWithRelationInput | Prisma.RentOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Rents.
   */
  cursor?: Prisma.RentWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Rents from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Rents.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Rents.
   */
  distinct?: Prisma.RentScalarFieldEnum | Prisma.RentScalarFieldEnum[]
  relationLoadStrategy?: Prisma.RelationLoadStrategy
}

/**
 * Rent findMany
 */
export type RentFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Rent
   */
  select?: Prisma.RentSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Rent
   */
  omit?: Prisma.RentOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.RentInclude<ExtArgs> | null
  /**
   * Filter, which Rents to fetch.
   */
  where?: Prisma.RentWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Rents to fetch.
   */
  orderBy?: Prisma.RentOrderByWithRelationInput | Prisma.RentOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing Rents.
   */
  cursor?: Prisma.RentWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Rents from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Rents.
   */
  skip?: number
  distinct?: Prisma.RentScalarFieldEnum | Prisma.RentScalarFieldEnum[]
  relationLoadStrategy?: Prisma.RelationLoadStrategy
}

/**
 * Rent create
 */
export type RentCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Rent
   */
  select?: Prisma.RentSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Rent
   */
  omit?: Prisma.RentOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.RentInclude<ExtArgs> | null
  /**
   * The data needed to create a Rent.
   */
  data: Prisma.XOR<Prisma.RentCreateInput, Prisma.RentUncheckedCreateInput>
  relationLoadStrategy?: Prisma.RelationLoadStrategy
}

/**
 * Rent createMany
 */
export type RentCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many Rents.
   */
  data: Prisma.RentCreateManyInput | Prisma.RentCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * Rent createManyAndReturn
 */
export type RentCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Rent
   */
  select?: Prisma.RentSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Rent
   */
  omit?: Prisma.RentOmit<ExtArgs> | null
  /**
   * The data used to create many Rents.
   */
  data: Prisma.RentCreateManyInput | Prisma.RentCreateManyInput[]
  skipDuplicates?: boolean
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.RentIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * Rent update
 */
export type RentUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Rent
   */
  select?: Prisma.RentSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Rent
   */
  omit?: Prisma.RentOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.RentInclude<ExtArgs> | null
  /**
   * The data needed to update a Rent.
   */
  data: Prisma.XOR<Prisma.RentUpdateInput, Prisma.RentUncheckedUpdateInput>
  /**
   * Choose, which Rent to update.
   */
  where: Prisma.RentWhereUniqueInput
  relationLoadStrategy?: Prisma.RelationLoadStrategy
}

/**
 * Rent updateMany
 */
export type RentUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update Rents.
   */
  data: Prisma.XOR<Prisma.RentUpdateManyMutationInput, Prisma.RentUncheckedUpdateManyInput>
  /**
   * Filter which Rents to update
   */
  where?: Prisma.RentWhereInput
  /**
   * Limit how many Rents to update.
   */
  limit?: number
}

/**
 * Rent updateManyAndReturn
 */
export type RentUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Rent
   */
  select?: Prisma.RentSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Rent
   */
  omit?: Prisma.RentOmit<ExtArgs> | null
  /**
   * The data used to update Rents.
   */
  data: Prisma.XOR<Prisma.RentUpdateManyMutationInput, Prisma.RentUncheckedUpdateManyInput>
  /**
   * Filter which Rents to update
   */
  where?: Prisma.RentWhereInput
  /**
   * Limit how many Rents to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.RentIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * Rent upsert
 */
export type RentUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Rent
   */
  select?: Prisma.RentSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Rent
   */
  omit?: Prisma.RentOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.RentInclude<ExtArgs> | null
  /**
   * The filter to search for the Rent to update in case it exists.
   */
  where: Prisma.RentWhereUniqueInput
  /**
   * In case the Rent found by the `where` argument doesn't exist, create a new Rent with this data.
   */
  create: Prisma.XOR<Prisma.RentCreateInput, Prisma.RentUncheckedCreateInput>
  /**
   * In case the Rent was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.RentUpdateInput, Prisma.RentUncheckedUpdateInput>
  relationLoadStrategy?: Prisma.RelationLoadStrategy
}

/**
 * Rent delete
 */
export type RentDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Rent
   */
  select?: Prisma.RentSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Rent
   */
  omit?: Prisma.RentOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.RentInclude<ExtArgs> | null
  /**
   * Filter which Rent to delete.
   */
  where: Prisma.RentWhereUniqueInput
  relationLoadStrategy?: Prisma.RelationLoadStrategy
}

/**
 * Rent deleteMany
 */
export type RentDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Rents to delete
   */
  where?: Prisma.RentWhereInput
  /**
   * Limit how many Rents to delete.
   */
  limit?: number
}

/**
 * Rent.reviews
 */
export type Rent$reviewsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Review
   */
  select?: Prisma.ReviewSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Review
   */
  omit?: Prisma.ReviewOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ReviewInclude<ExtArgs> | null
  where?: Prisma.ReviewWhereInput
  orderBy?: Prisma.ReviewOrderByWithRelationInput | Prisma.ReviewOrderByWithRelationInput[]
  cursor?: Prisma.ReviewWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.ReviewScalarFieldEnum | Prisma.ReviewScalarFieldEnum[]
}

/**
 * Rent without action
 */
export type RentDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Rent
   */
  select?: Prisma.RentSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Rent
   */
  omit?: Prisma.RentOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.RentInclude<ExtArgs> | null
}
