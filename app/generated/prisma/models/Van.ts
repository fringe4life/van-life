
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/**
 * This file exports the `Van` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import * as runtime from "@prisma/client/runtime/client"
import type * as $Enums from "../enums.ts"
import type * as Prisma from "../internal/prismaNamespace.ts"

/**
 * Model Van
 * 
 */
export type VanModel = runtime.Types.Result.DefaultSelection<Prisma.$VanPayload>

export type AggregateVan = {
  _count: VanCountAggregateOutputType | null
  _avg: VanAvgAggregateOutputType | null
  _sum: VanSumAggregateOutputType | null
  _min: VanMinAggregateOutputType | null
  _max: VanMaxAggregateOutputType | null
}

export type VanAvgAggregateOutputType = {
  price: number | null
}

export type VanSumAggregateOutputType = {
  price: number | null
}

export type VanMinAggregateOutputType = {
  id: string | null
  name: string | null
  price: number | null
  description: string | null
  imageUrl: string | null
  type: $Enums.VanType | null
  hostId: string | null
}

export type VanMaxAggregateOutputType = {
  id: string | null
  name: string | null
  price: number | null
  description: string | null
  imageUrl: string | null
  type: $Enums.VanType | null
  hostId: string | null
}

export type VanCountAggregateOutputType = {
  id: number
  name: number
  price: number
  description: number
  imageUrl: number
  type: number
  hostId: number
  _all: number
}


export type VanAvgAggregateInputType = {
  price?: true
}

export type VanSumAggregateInputType = {
  price?: true
}

export type VanMinAggregateInputType = {
  id?: true
  name?: true
  price?: true
  description?: true
  imageUrl?: true
  type?: true
  hostId?: true
}

export type VanMaxAggregateInputType = {
  id?: true
  name?: true
  price?: true
  description?: true
  imageUrl?: true
  type?: true
  hostId?: true
}

export type VanCountAggregateInputType = {
  id?: true
  name?: true
  price?: true
  description?: true
  imageUrl?: true
  type?: true
  hostId?: true
  _all?: true
}

export type VanAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Van to aggregate.
   */
  where?: Prisma.VanWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Vans to fetch.
   */
  orderBy?: Prisma.VanOrderByWithRelationInput | Prisma.VanOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.VanWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Vans from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Vans.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned Vans
  **/
  _count?: true | VanCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: VanAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: VanSumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: VanMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: VanMaxAggregateInputType
}

export type GetVanAggregateType<T extends VanAggregateArgs> = {
      [P in keyof T & keyof AggregateVan]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateVan[P]>
    : Prisma.GetScalarType<T[P], AggregateVan[P]>
}




export type VanGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.VanWhereInput
  orderBy?: Prisma.VanOrderByWithAggregationInput | Prisma.VanOrderByWithAggregationInput[]
  by: Prisma.VanScalarFieldEnum[] | Prisma.VanScalarFieldEnum
  having?: Prisma.VanScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: VanCountAggregateInputType | true
  _avg?: VanAvgAggregateInputType
  _sum?: VanSumAggregateInputType
  _min?: VanMinAggregateInputType
  _max?: VanMaxAggregateInputType
}

export type VanGroupByOutputType = {
  id: string
  name: string
  price: number
  description: string
  imageUrl: string
  type: $Enums.VanType
  hostId: string
  _count: VanCountAggregateOutputType | null
  _avg: VanAvgAggregateOutputType | null
  _sum: VanSumAggregateOutputType | null
  _min: VanMinAggregateOutputType | null
  _max: VanMaxAggregateOutputType | null
}

type GetVanGroupByPayload<T extends VanGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<VanGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof VanGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], VanGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], VanGroupByOutputType[P]>
      }
    >
  > 



export type VanWhereInput = {
  AND?: Prisma.VanWhereInput | Prisma.VanWhereInput[]
  OR?: Prisma.VanWhereInput[]
  NOT?: Prisma.VanWhereInput | Prisma.VanWhereInput[]
  id?: Prisma.StringFilter<"Van"> | string
  name?: Prisma.StringFilter<"Van"> | string
  price?: Prisma.IntFilter<"Van"> | number
  description?: Prisma.StringFilter<"Van"> | string
  imageUrl?: Prisma.StringFilter<"Van"> | string
  type?: Prisma.EnumVanTypeFilter<"Van"> | $Enums.VanType
  hostId?: Prisma.StringFilter<"Van"> | string
  userInfo?: Prisma.XOR<Prisma.UserInfoScalarRelationFilter, Prisma.UserInfoWhereInput>
}

export type VanOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  price?: Prisma.SortOrder
  description?: Prisma.SortOrder
  imageUrl?: Prisma.SortOrder
  type?: Prisma.SortOrder
  hostId?: Prisma.SortOrder
  userInfo?: Prisma.UserInfoOrderByWithRelationInput
}

export type VanWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  AND?: Prisma.VanWhereInput | Prisma.VanWhereInput[]
  OR?: Prisma.VanWhereInput[]
  NOT?: Prisma.VanWhereInput | Prisma.VanWhereInput[]
  name?: Prisma.StringFilter<"Van"> | string
  price?: Prisma.IntFilter<"Van"> | number
  description?: Prisma.StringFilter<"Van"> | string
  imageUrl?: Prisma.StringFilter<"Van"> | string
  type?: Prisma.EnumVanTypeFilter<"Van"> | $Enums.VanType
  hostId?: Prisma.StringFilter<"Van"> | string
  userInfo?: Prisma.XOR<Prisma.UserInfoScalarRelationFilter, Prisma.UserInfoWhereInput>
}, "id">

export type VanOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  price?: Prisma.SortOrder
  description?: Prisma.SortOrder
  imageUrl?: Prisma.SortOrder
  type?: Prisma.SortOrder
  hostId?: Prisma.SortOrder
  _count?: Prisma.VanCountOrderByAggregateInput
  _avg?: Prisma.VanAvgOrderByAggregateInput
  _max?: Prisma.VanMaxOrderByAggregateInput
  _min?: Prisma.VanMinOrderByAggregateInput
  _sum?: Prisma.VanSumOrderByAggregateInput
}

export type VanScalarWhereWithAggregatesInput = {
  AND?: Prisma.VanScalarWhereWithAggregatesInput | Prisma.VanScalarWhereWithAggregatesInput[]
  OR?: Prisma.VanScalarWhereWithAggregatesInput[]
  NOT?: Prisma.VanScalarWhereWithAggregatesInput | Prisma.VanScalarWhereWithAggregatesInput[]
  id?: Prisma.StringWithAggregatesFilter<"Van"> | string
  name?: Prisma.StringWithAggregatesFilter<"Van"> | string
  price?: Prisma.IntWithAggregatesFilter<"Van"> | number
  description?: Prisma.StringWithAggregatesFilter<"Van"> | string
  imageUrl?: Prisma.StringWithAggregatesFilter<"Van"> | string
  type?: Prisma.EnumVanTypeWithAggregatesFilter<"Van"> | $Enums.VanType
  hostId?: Prisma.StringWithAggregatesFilter<"Van"> | string
}

export type VanCreateInput = {
  id?: string
  name: string
  price: number
  description: string
  imageUrl: string
  type: $Enums.VanType
  userInfo: Prisma.UserInfoCreateNestedOneWithoutVansInput
}

export type VanUncheckedCreateInput = {
  id?: string
  name: string
  price: number
  description: string
  imageUrl: string
  type: $Enums.VanType
  hostId: string
}

export type VanUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  price?: Prisma.IntFieldUpdateOperationsInput | number
  description?: Prisma.StringFieldUpdateOperationsInput | string
  imageUrl?: Prisma.StringFieldUpdateOperationsInput | string
  type?: Prisma.EnumVanTypeFieldUpdateOperationsInput | $Enums.VanType
  userInfo?: Prisma.UserInfoUpdateOneRequiredWithoutVansNestedInput
}

export type VanUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  price?: Prisma.IntFieldUpdateOperationsInput | number
  description?: Prisma.StringFieldUpdateOperationsInput | string
  imageUrl?: Prisma.StringFieldUpdateOperationsInput | string
  type?: Prisma.EnumVanTypeFieldUpdateOperationsInput | $Enums.VanType
  hostId?: Prisma.StringFieldUpdateOperationsInput | string
}

export type VanCreateManyInput = {
  id?: string
  name: string
  price: number
  description: string
  imageUrl: string
  type: $Enums.VanType
  hostId: string
}

export type VanUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  price?: Prisma.IntFieldUpdateOperationsInput | number
  description?: Prisma.StringFieldUpdateOperationsInput | string
  imageUrl?: Prisma.StringFieldUpdateOperationsInput | string
  type?: Prisma.EnumVanTypeFieldUpdateOperationsInput | $Enums.VanType
}

export type VanUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  price?: Prisma.IntFieldUpdateOperationsInput | number
  description?: Prisma.StringFieldUpdateOperationsInput | string
  imageUrl?: Prisma.StringFieldUpdateOperationsInput | string
  type?: Prisma.EnumVanTypeFieldUpdateOperationsInput | $Enums.VanType
  hostId?: Prisma.StringFieldUpdateOperationsInput | string
}

export type VanListRelationFilter = {
  every?: Prisma.VanWhereInput
  some?: Prisma.VanWhereInput
  none?: Prisma.VanWhereInput
}

export type VanOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type VanCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  price?: Prisma.SortOrder
  description?: Prisma.SortOrder
  imageUrl?: Prisma.SortOrder
  type?: Prisma.SortOrder
  hostId?: Prisma.SortOrder
}

export type VanAvgOrderByAggregateInput = {
  price?: Prisma.SortOrder
}

export type VanMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  price?: Prisma.SortOrder
  description?: Prisma.SortOrder
  imageUrl?: Prisma.SortOrder
  type?: Prisma.SortOrder
  hostId?: Prisma.SortOrder
}

export type VanMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  price?: Prisma.SortOrder
  description?: Prisma.SortOrder
  imageUrl?: Prisma.SortOrder
  type?: Prisma.SortOrder
  hostId?: Prisma.SortOrder
}

export type VanSumOrderByAggregateInput = {
  price?: Prisma.SortOrder
}

export type VanCreateNestedManyWithoutUserInfoInput = {
  create?: Prisma.XOR<Prisma.VanCreateWithoutUserInfoInput, Prisma.VanUncheckedCreateWithoutUserInfoInput> | Prisma.VanCreateWithoutUserInfoInput[] | Prisma.VanUncheckedCreateWithoutUserInfoInput[]
  connectOrCreate?: Prisma.VanCreateOrConnectWithoutUserInfoInput | Prisma.VanCreateOrConnectWithoutUserInfoInput[]
  createMany?: Prisma.VanCreateManyUserInfoInputEnvelope
  connect?: Prisma.VanWhereUniqueInput | Prisma.VanWhereUniqueInput[]
}

export type VanUncheckedCreateNestedManyWithoutUserInfoInput = {
  create?: Prisma.XOR<Prisma.VanCreateWithoutUserInfoInput, Prisma.VanUncheckedCreateWithoutUserInfoInput> | Prisma.VanCreateWithoutUserInfoInput[] | Prisma.VanUncheckedCreateWithoutUserInfoInput[]
  connectOrCreate?: Prisma.VanCreateOrConnectWithoutUserInfoInput | Prisma.VanCreateOrConnectWithoutUserInfoInput[]
  createMany?: Prisma.VanCreateManyUserInfoInputEnvelope
  connect?: Prisma.VanWhereUniqueInput | Prisma.VanWhereUniqueInput[]
}

export type VanUpdateManyWithoutUserInfoNestedInput = {
  create?: Prisma.XOR<Prisma.VanCreateWithoutUserInfoInput, Prisma.VanUncheckedCreateWithoutUserInfoInput> | Prisma.VanCreateWithoutUserInfoInput[] | Prisma.VanUncheckedCreateWithoutUserInfoInput[]
  connectOrCreate?: Prisma.VanCreateOrConnectWithoutUserInfoInput | Prisma.VanCreateOrConnectWithoutUserInfoInput[]
  upsert?: Prisma.VanUpsertWithWhereUniqueWithoutUserInfoInput | Prisma.VanUpsertWithWhereUniqueWithoutUserInfoInput[]
  createMany?: Prisma.VanCreateManyUserInfoInputEnvelope
  set?: Prisma.VanWhereUniqueInput | Prisma.VanWhereUniqueInput[]
  disconnect?: Prisma.VanWhereUniqueInput | Prisma.VanWhereUniqueInput[]
  delete?: Prisma.VanWhereUniqueInput | Prisma.VanWhereUniqueInput[]
  connect?: Prisma.VanWhereUniqueInput | Prisma.VanWhereUniqueInput[]
  update?: Prisma.VanUpdateWithWhereUniqueWithoutUserInfoInput | Prisma.VanUpdateWithWhereUniqueWithoutUserInfoInput[]
  updateMany?: Prisma.VanUpdateManyWithWhereWithoutUserInfoInput | Prisma.VanUpdateManyWithWhereWithoutUserInfoInput[]
  deleteMany?: Prisma.VanScalarWhereInput | Prisma.VanScalarWhereInput[]
}

export type VanUncheckedUpdateManyWithoutUserInfoNestedInput = {
  create?: Prisma.XOR<Prisma.VanCreateWithoutUserInfoInput, Prisma.VanUncheckedCreateWithoutUserInfoInput> | Prisma.VanCreateWithoutUserInfoInput[] | Prisma.VanUncheckedCreateWithoutUserInfoInput[]
  connectOrCreate?: Prisma.VanCreateOrConnectWithoutUserInfoInput | Prisma.VanCreateOrConnectWithoutUserInfoInput[]
  upsert?: Prisma.VanUpsertWithWhereUniqueWithoutUserInfoInput | Prisma.VanUpsertWithWhereUniqueWithoutUserInfoInput[]
  createMany?: Prisma.VanCreateManyUserInfoInputEnvelope
  set?: Prisma.VanWhereUniqueInput | Prisma.VanWhereUniqueInput[]
  disconnect?: Prisma.VanWhereUniqueInput | Prisma.VanWhereUniqueInput[]
  delete?: Prisma.VanWhereUniqueInput | Prisma.VanWhereUniqueInput[]
  connect?: Prisma.VanWhereUniqueInput | Prisma.VanWhereUniqueInput[]
  update?: Prisma.VanUpdateWithWhereUniqueWithoutUserInfoInput | Prisma.VanUpdateWithWhereUniqueWithoutUserInfoInput[]
  updateMany?: Prisma.VanUpdateManyWithWhereWithoutUserInfoInput | Prisma.VanUpdateManyWithWhereWithoutUserInfoInput[]
  deleteMany?: Prisma.VanScalarWhereInput | Prisma.VanScalarWhereInput[]
}

export type EnumVanTypeFieldUpdateOperationsInput = {
  set?: $Enums.VanType
}

export type VanCreateWithoutUserInfoInput = {
  id?: string
  name: string
  price: number
  description: string
  imageUrl: string
  type: $Enums.VanType
}

export type VanUncheckedCreateWithoutUserInfoInput = {
  id?: string
  name: string
  price: number
  description: string
  imageUrl: string
  type: $Enums.VanType
}

export type VanCreateOrConnectWithoutUserInfoInput = {
  where: Prisma.VanWhereUniqueInput
  create: Prisma.XOR<Prisma.VanCreateWithoutUserInfoInput, Prisma.VanUncheckedCreateWithoutUserInfoInput>
}

export type VanCreateManyUserInfoInputEnvelope = {
  data: Prisma.VanCreateManyUserInfoInput | Prisma.VanCreateManyUserInfoInput[]
  skipDuplicates?: boolean
}

export type VanUpsertWithWhereUniqueWithoutUserInfoInput = {
  where: Prisma.VanWhereUniqueInput
  update: Prisma.XOR<Prisma.VanUpdateWithoutUserInfoInput, Prisma.VanUncheckedUpdateWithoutUserInfoInput>
  create: Prisma.XOR<Prisma.VanCreateWithoutUserInfoInput, Prisma.VanUncheckedCreateWithoutUserInfoInput>
}

export type VanUpdateWithWhereUniqueWithoutUserInfoInput = {
  where: Prisma.VanWhereUniqueInput
  data: Prisma.XOR<Prisma.VanUpdateWithoutUserInfoInput, Prisma.VanUncheckedUpdateWithoutUserInfoInput>
}

export type VanUpdateManyWithWhereWithoutUserInfoInput = {
  where: Prisma.VanScalarWhereInput
  data: Prisma.XOR<Prisma.VanUpdateManyMutationInput, Prisma.VanUncheckedUpdateManyWithoutUserInfoInput>
}

export type VanScalarWhereInput = {
  AND?: Prisma.VanScalarWhereInput | Prisma.VanScalarWhereInput[]
  OR?: Prisma.VanScalarWhereInput[]
  NOT?: Prisma.VanScalarWhereInput | Prisma.VanScalarWhereInput[]
  id?: Prisma.StringFilter<"Van"> | string
  name?: Prisma.StringFilter<"Van"> | string
  price?: Prisma.IntFilter<"Van"> | number
  description?: Prisma.StringFilter<"Van"> | string
  imageUrl?: Prisma.StringFilter<"Van"> | string
  type?: Prisma.EnumVanTypeFilter<"Van"> | $Enums.VanType
  hostId?: Prisma.StringFilter<"Van"> | string
}

export type VanCreateManyUserInfoInput = {
  id?: string
  name: string
  price: number
  description: string
  imageUrl: string
  type: $Enums.VanType
}

export type VanUpdateWithoutUserInfoInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  price?: Prisma.IntFieldUpdateOperationsInput | number
  description?: Prisma.StringFieldUpdateOperationsInput | string
  imageUrl?: Prisma.StringFieldUpdateOperationsInput | string
  type?: Prisma.EnumVanTypeFieldUpdateOperationsInput | $Enums.VanType
}

export type VanUncheckedUpdateWithoutUserInfoInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  price?: Prisma.IntFieldUpdateOperationsInput | number
  description?: Prisma.StringFieldUpdateOperationsInput | string
  imageUrl?: Prisma.StringFieldUpdateOperationsInput | string
  type?: Prisma.EnumVanTypeFieldUpdateOperationsInput | $Enums.VanType
}

export type VanUncheckedUpdateManyWithoutUserInfoInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  price?: Prisma.IntFieldUpdateOperationsInput | number
  description?: Prisma.StringFieldUpdateOperationsInput | string
  imageUrl?: Prisma.StringFieldUpdateOperationsInput | string
  type?: Prisma.EnumVanTypeFieldUpdateOperationsInput | $Enums.VanType
}



export type VanSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  name?: boolean
  price?: boolean
  description?: boolean
  imageUrl?: boolean
  type?: boolean
  hostId?: boolean
  userInfo?: boolean | Prisma.UserInfoDefaultArgs<ExtArgs>
}, ExtArgs["result"]["van"]>

export type VanSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  name?: boolean
  price?: boolean
  description?: boolean
  imageUrl?: boolean
  type?: boolean
  hostId?: boolean
  userInfo?: boolean | Prisma.UserInfoDefaultArgs<ExtArgs>
}, ExtArgs["result"]["van"]>

export type VanSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  name?: boolean
  price?: boolean
  description?: boolean
  imageUrl?: boolean
  type?: boolean
  hostId?: boolean
  userInfo?: boolean | Prisma.UserInfoDefaultArgs<ExtArgs>
}, ExtArgs["result"]["van"]>

export type VanSelectScalar = {
  id?: boolean
  name?: boolean
  price?: boolean
  description?: boolean
  imageUrl?: boolean
  type?: boolean
  hostId?: boolean
}

export type VanOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "name" | "price" | "description" | "imageUrl" | "type" | "hostId", ExtArgs["result"]["van"]>
export type VanInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  userInfo?: boolean | Prisma.UserInfoDefaultArgs<ExtArgs>
}
export type VanIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  userInfo?: boolean | Prisma.UserInfoDefaultArgs<ExtArgs>
}
export type VanIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  userInfo?: boolean | Prisma.UserInfoDefaultArgs<ExtArgs>
}

export type $VanPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "Van"
  objects: {
    userInfo: Prisma.$UserInfoPayload<ExtArgs>
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    name: string
    price: number
    description: string
    imageUrl: string
    type: $Enums.VanType
    hostId: string
  }, ExtArgs["result"]["van"]>
  composites: {}
}

export type VanGetPayload<S extends boolean | null | undefined | VanDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$VanPayload, S>

export type VanCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<VanFindManyArgs, 'select' | 'include' | 'distinct' | 'omit' | 'relationLoadStrategy'> & {
    select?: VanCountAggregateInputType | true
  }

export interface VanDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Van'], meta: { name: 'Van' } }
  /**
   * Find zero or one Van that matches the filter.
   * @param {VanFindUniqueArgs} args - Arguments to find a Van
   * @example
   * // Get one Van
   * const van = await prisma.van.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends VanFindUniqueArgs>(args: Prisma.SelectSubset<T, VanFindUniqueArgs<ExtArgs>>): Prisma.Prisma__VanClient<runtime.Types.Result.GetResult<Prisma.$VanPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one Van that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {VanFindUniqueOrThrowArgs} args - Arguments to find a Van
   * @example
   * // Get one Van
   * const van = await prisma.van.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends VanFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, VanFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__VanClient<runtime.Types.Result.GetResult<Prisma.$VanPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Van that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {VanFindFirstArgs} args - Arguments to find a Van
   * @example
   * // Get one Van
   * const van = await prisma.van.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends VanFindFirstArgs>(args?: Prisma.SelectSubset<T, VanFindFirstArgs<ExtArgs>>): Prisma.Prisma__VanClient<runtime.Types.Result.GetResult<Prisma.$VanPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Van that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {VanFindFirstOrThrowArgs} args - Arguments to find a Van
   * @example
   * // Get one Van
   * const van = await prisma.van.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends VanFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, VanFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__VanClient<runtime.Types.Result.GetResult<Prisma.$VanPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more Vans that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {VanFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Vans
   * const vans = await prisma.van.findMany()
   * 
   * // Get first 10 Vans
   * const vans = await prisma.van.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const vanWithIdOnly = await prisma.van.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends VanFindManyArgs>(args?: Prisma.SelectSubset<T, VanFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$VanPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a Van.
   * @param {VanCreateArgs} args - Arguments to create a Van.
   * @example
   * // Create one Van
   * const Van = await prisma.van.create({
   *   data: {
   *     // ... data to create a Van
   *   }
   * })
   * 
   */
  create<T extends VanCreateArgs>(args: Prisma.SelectSubset<T, VanCreateArgs<ExtArgs>>): Prisma.Prisma__VanClient<runtime.Types.Result.GetResult<Prisma.$VanPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many Vans.
   * @param {VanCreateManyArgs} args - Arguments to create many Vans.
   * @example
   * // Create many Vans
   * const van = await prisma.van.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends VanCreateManyArgs>(args?: Prisma.SelectSubset<T, VanCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many Vans and returns the data saved in the database.
   * @param {VanCreateManyAndReturnArgs} args - Arguments to create many Vans.
   * @example
   * // Create many Vans
   * const van = await prisma.van.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many Vans and only return the `id`
   * const vanWithIdOnly = await prisma.van.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends VanCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, VanCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$VanPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a Van.
   * @param {VanDeleteArgs} args - Arguments to delete one Van.
   * @example
   * // Delete one Van
   * const Van = await prisma.van.delete({
   *   where: {
   *     // ... filter to delete one Van
   *   }
   * })
   * 
   */
  delete<T extends VanDeleteArgs>(args: Prisma.SelectSubset<T, VanDeleteArgs<ExtArgs>>): Prisma.Prisma__VanClient<runtime.Types.Result.GetResult<Prisma.$VanPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one Van.
   * @param {VanUpdateArgs} args - Arguments to update one Van.
   * @example
   * // Update one Van
   * const van = await prisma.van.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends VanUpdateArgs>(args: Prisma.SelectSubset<T, VanUpdateArgs<ExtArgs>>): Prisma.Prisma__VanClient<runtime.Types.Result.GetResult<Prisma.$VanPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more Vans.
   * @param {VanDeleteManyArgs} args - Arguments to filter Vans to delete.
   * @example
   * // Delete a few Vans
   * const { count } = await prisma.van.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends VanDeleteManyArgs>(args?: Prisma.SelectSubset<T, VanDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Vans.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {VanUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Vans
   * const van = await prisma.van.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends VanUpdateManyArgs>(args: Prisma.SelectSubset<T, VanUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Vans and returns the data updated in the database.
   * @param {VanUpdateManyAndReturnArgs} args - Arguments to update many Vans.
   * @example
   * // Update many Vans
   * const van = await prisma.van.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more Vans and only return the `id`
   * const vanWithIdOnly = await prisma.van.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends VanUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, VanUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$VanPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one Van.
   * @param {VanUpsertArgs} args - Arguments to update or create a Van.
   * @example
   * // Update or create a Van
   * const van = await prisma.van.upsert({
   *   create: {
   *     // ... data to create a Van
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Van we want to update
   *   }
   * })
   */
  upsert<T extends VanUpsertArgs>(args: Prisma.SelectSubset<T, VanUpsertArgs<ExtArgs>>): Prisma.Prisma__VanClient<runtime.Types.Result.GetResult<Prisma.$VanPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of Vans.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {VanCountArgs} args - Arguments to filter Vans to count.
   * @example
   * // Count the number of Vans
   * const count = await prisma.van.count({
   *   where: {
   *     // ... the filter for the Vans we want to count
   *   }
   * })
  **/
  count<T extends VanCountArgs>(
    args?: Prisma.Subset<T, VanCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], VanCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a Van.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {VanAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends VanAggregateArgs>(args: Prisma.Subset<T, VanAggregateArgs>): Prisma.PrismaPromise<GetVanAggregateType<T>>

  /**
   * Group by Van.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {VanGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends VanGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: VanGroupByArgs['orderBy'] }
      : { orderBy?: VanGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, VanGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetVanGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the Van model
 */
readonly fields: VanFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for Van.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__VanClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  userInfo<T extends Prisma.UserInfoDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.UserInfoDefaultArgs<ExtArgs>>): Prisma.Prisma__UserInfoClient<runtime.Types.Result.GetResult<Prisma.$UserInfoPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the Van model
 */
export interface VanFieldRefs {
  readonly id: Prisma.FieldRef<"Van", 'String'>
  readonly name: Prisma.FieldRef<"Van", 'String'>
  readonly price: Prisma.FieldRef<"Van", 'Int'>
  readonly description: Prisma.FieldRef<"Van", 'String'>
  readonly imageUrl: Prisma.FieldRef<"Van", 'String'>
  readonly type: Prisma.FieldRef<"Van", 'VanType'>
  readonly hostId: Prisma.FieldRef<"Van", 'String'>
}
    

// Custom InputTypes
/**
 * Van findUnique
 */
export type VanFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Van
   */
  select?: Prisma.VanSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Van
   */
  omit?: Prisma.VanOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.VanInclude<ExtArgs> | null
  /**
   * Filter, which Van to fetch.
   */
  where: Prisma.VanWhereUniqueInput
  relationLoadStrategy?: Prisma.RelationLoadStrategy
}

/**
 * Van findUniqueOrThrow
 */
export type VanFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Van
   */
  select?: Prisma.VanSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Van
   */
  omit?: Prisma.VanOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.VanInclude<ExtArgs> | null
  /**
   * Filter, which Van to fetch.
   */
  where: Prisma.VanWhereUniqueInput
  relationLoadStrategy?: Prisma.RelationLoadStrategy
}

/**
 * Van findFirst
 */
export type VanFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Van
   */
  select?: Prisma.VanSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Van
   */
  omit?: Prisma.VanOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.VanInclude<ExtArgs> | null
  /**
   * Filter, which Van to fetch.
   */
  where?: Prisma.VanWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Vans to fetch.
   */
  orderBy?: Prisma.VanOrderByWithRelationInput | Prisma.VanOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Vans.
   */
  cursor?: Prisma.VanWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Vans from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Vans.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Vans.
   */
  distinct?: Prisma.VanScalarFieldEnum | Prisma.VanScalarFieldEnum[]
  relationLoadStrategy?: Prisma.RelationLoadStrategy
}

/**
 * Van findFirstOrThrow
 */
export type VanFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Van
   */
  select?: Prisma.VanSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Van
   */
  omit?: Prisma.VanOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.VanInclude<ExtArgs> | null
  /**
   * Filter, which Van to fetch.
   */
  where?: Prisma.VanWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Vans to fetch.
   */
  orderBy?: Prisma.VanOrderByWithRelationInput | Prisma.VanOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Vans.
   */
  cursor?: Prisma.VanWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Vans from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Vans.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Vans.
   */
  distinct?: Prisma.VanScalarFieldEnum | Prisma.VanScalarFieldEnum[]
  relationLoadStrategy?: Prisma.RelationLoadStrategy
}

/**
 * Van findMany
 */
export type VanFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Van
   */
  select?: Prisma.VanSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Van
   */
  omit?: Prisma.VanOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.VanInclude<ExtArgs> | null
  /**
   * Filter, which Vans to fetch.
   */
  where?: Prisma.VanWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Vans to fetch.
   */
  orderBy?: Prisma.VanOrderByWithRelationInput | Prisma.VanOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing Vans.
   */
  cursor?: Prisma.VanWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Vans from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Vans.
   */
  skip?: number
  distinct?: Prisma.VanScalarFieldEnum | Prisma.VanScalarFieldEnum[]
  relationLoadStrategy?: Prisma.RelationLoadStrategy
}

/**
 * Van create
 */
export type VanCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Van
   */
  select?: Prisma.VanSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Van
   */
  omit?: Prisma.VanOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.VanInclude<ExtArgs> | null
  /**
   * The data needed to create a Van.
   */
  data: Prisma.XOR<Prisma.VanCreateInput, Prisma.VanUncheckedCreateInput>
  relationLoadStrategy?: Prisma.RelationLoadStrategy
}

/**
 * Van createMany
 */
export type VanCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many Vans.
   */
  data: Prisma.VanCreateManyInput | Prisma.VanCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * Van createManyAndReturn
 */
export type VanCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Van
   */
  select?: Prisma.VanSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Van
   */
  omit?: Prisma.VanOmit<ExtArgs> | null
  /**
   * The data used to create many Vans.
   */
  data: Prisma.VanCreateManyInput | Prisma.VanCreateManyInput[]
  skipDuplicates?: boolean
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.VanIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * Van update
 */
export type VanUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Van
   */
  select?: Prisma.VanSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Van
   */
  omit?: Prisma.VanOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.VanInclude<ExtArgs> | null
  /**
   * The data needed to update a Van.
   */
  data: Prisma.XOR<Prisma.VanUpdateInput, Prisma.VanUncheckedUpdateInput>
  /**
   * Choose, which Van to update.
   */
  where: Prisma.VanWhereUniqueInput
  relationLoadStrategy?: Prisma.RelationLoadStrategy
}

/**
 * Van updateMany
 */
export type VanUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update Vans.
   */
  data: Prisma.XOR<Prisma.VanUpdateManyMutationInput, Prisma.VanUncheckedUpdateManyInput>
  /**
   * Filter which Vans to update
   */
  where?: Prisma.VanWhereInput
  /**
   * Limit how many Vans to update.
   */
  limit?: number
}

/**
 * Van updateManyAndReturn
 */
export type VanUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Van
   */
  select?: Prisma.VanSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Van
   */
  omit?: Prisma.VanOmit<ExtArgs> | null
  /**
   * The data used to update Vans.
   */
  data: Prisma.XOR<Prisma.VanUpdateManyMutationInput, Prisma.VanUncheckedUpdateManyInput>
  /**
   * Filter which Vans to update
   */
  where?: Prisma.VanWhereInput
  /**
   * Limit how many Vans to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.VanIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * Van upsert
 */
export type VanUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Van
   */
  select?: Prisma.VanSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Van
   */
  omit?: Prisma.VanOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.VanInclude<ExtArgs> | null
  /**
   * The filter to search for the Van to update in case it exists.
   */
  where: Prisma.VanWhereUniqueInput
  /**
   * In case the Van found by the `where` argument doesn't exist, create a new Van with this data.
   */
  create: Prisma.XOR<Prisma.VanCreateInput, Prisma.VanUncheckedCreateInput>
  /**
   * In case the Van was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.VanUpdateInput, Prisma.VanUncheckedUpdateInput>
  relationLoadStrategy?: Prisma.RelationLoadStrategy
}

/**
 * Van delete
 */
export type VanDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Van
   */
  select?: Prisma.VanSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Van
   */
  omit?: Prisma.VanOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.VanInclude<ExtArgs> | null
  /**
   * Filter which Van to delete.
   */
  where: Prisma.VanWhereUniqueInput
  relationLoadStrategy?: Prisma.RelationLoadStrategy
}

/**
 * Van deleteMany
 */
export type VanDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Vans to delete
   */
  where?: Prisma.VanWhereInput
  /**
   * Limit how many Vans to delete.
   */
  limit?: number
}

/**
 * Van without action
 */
export type VanDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Van
   */
  select?: Prisma.VanSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Van
   */
  omit?: Prisma.VanOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.VanInclude<ExtArgs> | null
}
