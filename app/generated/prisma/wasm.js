
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  PrismaClientKnownRequestError,
  PrismaClientUnknownRequestError,
  PrismaClientRustPanicError,
  PrismaClientInitializationError,
  PrismaClientValidationError,
  getPrismaClient,
  sqltag,
  empty,
  join,
  raw,
  skip,
  Decimal,
  Debug,
  objectEnumValues,
  makeStrictEnum,
  Extensions,
  warnOnce,
  defineDmmfProperty,
  Public,
  getRuntime,
  createParam,
} = require('./runtime/wasm-compiler-edge.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.16.0
 * Query Engine version: 1c57fdcd7e44b29b9313256c76699e91c3ac3c43
 */
Prisma.prismaVersion = {
  client: "6.16.0",
  engine: "1c57fdcd7e44b29b9313256c76699e91c3ac3c43"
}

Prisma.PrismaClientKnownRequestError = PrismaClientKnownRequestError;
Prisma.PrismaClientUnknownRequestError = PrismaClientUnknownRequestError
Prisma.PrismaClientRustPanicError = PrismaClientRustPanicError
Prisma.PrismaClientInitializationError = PrismaClientInitializationError
Prisma.PrismaClientValidationError = PrismaClientValidationError
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = sqltag
Prisma.empty = empty
Prisma.join = join
Prisma.raw = raw
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = Extensions.getExtensionContext
Prisma.defineExtension = Extensions.defineExtension

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}





/**
 * Enums
 */
exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.AccountScalarFieldEnum = {
  id: 'id',
  accountId: 'accountId',
  providerId: 'providerId',
  userId: 'userId',
  accessToken: 'accessToken',
  refreshToken: 'refreshToken',
  idToken: 'idToken',
  accessTokenExpiresAt: 'accessTokenExpiresAt',
  refreshTokenExpiresAt: 'refreshTokenExpiresAt',
  scope: 'scope',
  password: 'password',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.RelationLoadStrategy = {
  query: 'query',
  join: 'join'
};

exports.Prisma.SessionScalarFieldEnum = {
  id: 'id',
  expiresAt: 'expiresAt',
  token: 'token',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  ipAddress: 'ipAddress',
  userAgent: 'userAgent',
  userId: 'userId',
  impersonatedBy: 'impersonatedBy'
};

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  name: 'name',
  email: 'email',
  emailVerified: 'emailVerified',
  image: 'image',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  role: 'role',
  banned: 'banned',
  banReason: 'banReason',
  banExpires: 'banExpires',
  firstName: 'firstName',
  lastName: 'lastName',
  phone: 'phone'
};

exports.Prisma.VerificationScalarFieldEnum = {
  id: 'id',
  identifier: 'identifier',
  value: 'value',
  expiresAt: 'expiresAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.RentScalarFieldEnum = {
  id: 'id',
  amount: 'amount',
  renterId: 'renterId',
  hostId: 'hostId',
  rentedAt: 'rentedAt',
  rentedTo: 'rentedTo',
  vanId: 'vanId'
};

exports.Prisma.ReviewScalarFieldEnum = {
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  text: 'text',
  userId: 'userId',
  rating: 'rating',
  rentId: 'rentId',
  id: 'id'
};

exports.Prisma.TransactionScalarFieldEnum = {
  id: 'id',
  createdAt: 'createdAt',
  type: 'type',
  amount: 'amount',
  userId: 'userId'
};

exports.Prisma.UserInfoScalarFieldEnum = {
  userId: 'userId',
  moneyAdded: 'moneyAdded'
};

exports.Prisma.VanScalarFieldEnum = {
  id: 'id',
  name: 'name',
  price: 'price',
  description: 'description',
  imageUrl: 'imageUrl',
  type: 'type',
  hostId: 'hostId',
  isRented: 'isRented',
  createdAt: 'createdAt'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};
exports.VanType = exports.$Enums.VanType = {
  SIMPLE: 'SIMPLE',
  LUXURY: 'LUXURY',
  RUGGED: 'RUGGED'
};

exports.TransactionType = exports.$Enums.TransactionType = {
  DEPOSIT: 'DEPOSIT',
  WITHDRAW: 'WITHDRAW'
};

exports.Prisma.ModelName = {
  Account: 'Account',
  Session: 'Session',
  User: 'User',
  Verification: 'Verification',
  Rent: 'Rent',
  Review: 'Review',
  Transaction: 'Transaction',
  UserInfo: 'UserInfo',
  Van: 'Van'
};
/**
 * Create the Client
 */
const config = {
  "generator": {
    "name": "client",
    "provider": {
      "fromEnvVar": null,
      "value": "prisma-client-js"
    },
    "output": {
      "value": "/home/cc/Programming/Scrimba-FrontendPath/van-life/app/generated/prisma",
      "fromEnvVar": null
    },
    "config": {
      "runtime": "vercel-edge",
      "engineType": "client"
    },
    "binaryTargets": [
      {
        "fromEnvVar": null,
        "value": "rhel-openssl-3.0.x",
        "native": true
      }
    ],
    "previewFeatures": [
      "relationJoins"
    ],
    "sourceFilePath": "/home/cc/Programming/Scrimba-FrontendPath/van-life/prisma/schema.prisma",
    "isCustomOutput": true
  },
  "relativeEnvPaths": {
    "rootEnvPath": "../../../.env",
    "schemaEnvPath": "../../../.env"
  },
  "relativePath": "../../../prisma",
  "clientVersion": "6.16.0",
  "engineVersion": "1c57fdcd7e44b29b9313256c76699e91c3ac3c43",
  "datasourceNames": [
    "db"
  ],
  "activeProvider": "postgresql",
  "postinstall": false,
  "inlineDatasources": {
    "db": {
      "url": {
        "fromEnvVar": "DATABASE_URL",
        "value": null
      }
    }
  },
  "inlineSchema": "model Account {\n  id                    String    @id\n  accountId             String\n  providerId            String\n  userId                String\n  accessToken           String?\n  refreshToken          String?\n  idToken               String?\n  accessTokenExpiresAt  DateTime?\n  refreshTokenExpiresAt DateTime?\n  scope                 String?\n  password              String?\n  createdAt             DateTime?\n  updatedAt             DateTime?\n  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)\n\n  @@map(\"account\")\n}\n\nmodel Session {\n  id             String    @id\n  expiresAt      DateTime\n  token          String    @unique\n  createdAt      DateTime?\n  updatedAt      DateTime?\n  ipAddress      String?\n  userAgent      String?\n  userId         String\n  impersonatedBy String?\n  user           User      @relation(fields: [userId], references: [id], onDelete: Cascade)\n\n  @@map(\"session\")\n}\n\nmodel User {\n  id            String    @id @default(cuid())\n  name          String\n  email         String    @unique\n  emailVerified Boolean\n  image         String?\n  createdAt     DateTime?\n  updatedAt     DateTime?\n  role          String?\n  banned        Boolean?\n  banReason     String?\n  banExpires    DateTime?\n  firstName     String?\n  lastName      String?\n  phone         String?\n  userInfo      UserInfo?\n  Account       Account[]\n  Session       Session[]\n\n  @@map(\"user\")\n}\n\nmodel Verification {\n  id         String    @id\n  identifier String\n  value      String\n  expiresAt  DateTime\n  createdAt  DateTime?\n  updatedAt  DateTime?\n\n  @@map(\"verification\")\n}\n\nenum VanType {\n  SIMPLE @map(\"simple\")\n  LUXURY @map(\"luxury\")\n  RUGGED @map(\"rugged\")\n}\n\nenum TransactionType {\n  DEPOSIT  @map(\"deposit\")\n  WITHDRAW @map(\"withdraw\")\n}\n\nmodel Rent {\n  id       String    @id @default(cuid())\n  amount   Float     @default(0)\n  renterId String\n  hostId   String\n  rentedAt DateTime  @default(now()) @db.Date\n  rentedTo DateTime? @db.Date\n  vanId    String\n  host     UserInfo  @relation(\"host\", fields: [hostId], references: [userId])\n  renter   UserInfo  @relation(\"renter\", fields: [renterId], references: [userId])\n  van      Van       @relation(fields: [vanId], references: [id])\n  reviews  Review[]\n\n  @@unique([rentedTo, vanId])\n  @@index([rentedTo])\n  @@index([vanId])\n  @@index([renterId])\n  @@index([hostId])\n  @@index([renterId, rentedTo])\n  @@index([hostId, rentedTo])\n}\n\nmodel Review {\n  createdAt DateTime @default(now()) @db.Date\n  updatedAt DateTime @updatedAt @db.Date\n  text      String   @db.VarChar(512)\n  userId    String\n  rating    Int      @db.SmallInt\n  rentId    String\n  id        String   @id @default(cuid())\n  rent      Rent     @relation(fields: [rentId], references: [id])\n  user      UserInfo @relation(fields: [userId], references: [userId])\n\n  @@index([rentId, userId])\n  @@index([userId(sort: Desc)])\n  @@index([rentId(sort: Desc)])\n  @@index([rating(sort: Desc)])\n  @@index([createdAt(sort: Desc)])\n  @@index([updatedAt(sort: Desc)])\n}\n\nmodel Transaction {\n  id        String          @id @default(cuid())\n  createdAt DateTime        @default(now())\n  type      TransactionType\n  amount    Float\n  userId    String\n  userInfo  UserInfo        @relation(fields: [userId], references: [userId])\n}\n\nmodel UserInfo {\n  userId       String        @id\n  moneyAdded   Float         @default(0)\n  rented       Rent[]        @relation(\"host\")\n  renter       Rent[]        @relation(\"renter\")\n  review       Review[]\n  user         User          @relation(fields: [userId], references: [id])\n  vans         Van[]\n  transactions Transaction[]\n\n  @@index([userId])\n}\n\nmodel Van {\n  id          String   @id @default(cuid())\n  name        String   @unique @db.VarChar(60)\n  price       Int      @db.SmallInt\n  description String   @db.VarChar(1024)\n  imageUrl    String\n  type        VanType\n  hostId      String\n  isRented    Boolean  @default(false)\n  rent        Rent[]\n  userInfo    UserInfo @relation(fields: [hostId], references: [userId])\n  createdAt   DateTime @default(now()) @db.Date\n\n  @@unique([createdAt(sort: Desc), id(sort: Desc)])\n  @@index([hostId])\n  @@index([type])\n  @@index([id(sort: Desc), hostId])\n  @@index([isRented])\n  @@index([type(sort: Desc), id(sort: Desc)])\n}\n\ngenerator client {\n  provider        = \"prisma-client-js\"\n  previewFeatures = [\"relationJoins\"]\n  output          = \"../app/generated/prisma\"\n  runtime         = \"vercel-edge\"\n  engineType      = \"client\"\n}\n\ndatasource db {\n  provider = \"postgresql\"\n  url      = env(\"DATABASE_URL\")\n}\n",
  "inlineSchemaHash": "880178cf6f8faad21fa7d99fcd2066f0a6eef832df97ed63b03c3cff3ec2b94f",
  "copyEngine": true
}
config.dirname = '/'

config.runtimeDataModel = JSON.parse("{\"models\":{\"Account\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"accountId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"providerId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"userId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"accessToken\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"refreshToken\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"idToken\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"accessTokenExpiresAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"refreshTokenExpiresAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"scope\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"password\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"user\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"AccountToUser\"}],\"dbName\":\"account\"},\"Session\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"expiresAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"token\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"ipAddress\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"userAgent\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"userId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"impersonatedBy\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"user\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"SessionToUser\"}],\"dbName\":\"session\"},\"User\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"name\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"email\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"emailVerified\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"image\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"role\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"banned\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"banReason\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"banExpires\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"firstName\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"lastName\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"phone\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"userInfo\",\"kind\":\"object\",\"type\":\"UserInfo\",\"relationName\":\"UserToUserInfo\"},{\"name\":\"Account\",\"kind\":\"object\",\"type\":\"Account\",\"relationName\":\"AccountToUser\"},{\"name\":\"Session\",\"kind\":\"object\",\"type\":\"Session\",\"relationName\":\"SessionToUser\"}],\"dbName\":\"user\"},\"Verification\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"identifier\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"value\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"expiresAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"}],\"dbName\":\"verification\"},\"Rent\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"amount\",\"kind\":\"scalar\",\"type\":\"Float\"},{\"name\":\"renterId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"hostId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"rentedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"rentedTo\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"vanId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"host\",\"kind\":\"object\",\"type\":\"UserInfo\",\"relationName\":\"host\"},{\"name\":\"renter\",\"kind\":\"object\",\"type\":\"UserInfo\",\"relationName\":\"renter\"},{\"name\":\"van\",\"kind\":\"object\",\"type\":\"Van\",\"relationName\":\"RentToVan\"},{\"name\":\"reviews\",\"kind\":\"object\",\"type\":\"Review\",\"relationName\":\"RentToReview\"}],\"dbName\":null},\"Review\":{\"fields\":[{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"text\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"userId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"rating\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"rentId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"rent\",\"kind\":\"object\",\"type\":\"Rent\",\"relationName\":\"RentToReview\"},{\"name\":\"user\",\"kind\":\"object\",\"type\":\"UserInfo\",\"relationName\":\"ReviewToUserInfo\"}],\"dbName\":null},\"Transaction\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"type\",\"kind\":\"enum\",\"type\":\"TransactionType\"},{\"name\":\"amount\",\"kind\":\"scalar\",\"type\":\"Float\"},{\"name\":\"userId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"userInfo\",\"kind\":\"object\",\"type\":\"UserInfo\",\"relationName\":\"TransactionToUserInfo\"}],\"dbName\":null},\"UserInfo\":{\"fields\":[{\"name\":\"userId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"moneyAdded\",\"kind\":\"scalar\",\"type\":\"Float\"},{\"name\":\"rented\",\"kind\":\"object\",\"type\":\"Rent\",\"relationName\":\"host\"},{\"name\":\"renter\",\"kind\":\"object\",\"type\":\"Rent\",\"relationName\":\"renter\"},{\"name\":\"review\",\"kind\":\"object\",\"type\":\"Review\",\"relationName\":\"ReviewToUserInfo\"},{\"name\":\"user\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"UserToUserInfo\"},{\"name\":\"vans\",\"kind\":\"object\",\"type\":\"Van\",\"relationName\":\"UserInfoToVan\"},{\"name\":\"transactions\",\"kind\":\"object\",\"type\":\"Transaction\",\"relationName\":\"TransactionToUserInfo\"}],\"dbName\":null},\"Van\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"name\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"price\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"description\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"imageUrl\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"type\",\"kind\":\"enum\",\"type\":\"VanType\"},{\"name\":\"hostId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"isRented\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"rent\",\"kind\":\"object\",\"type\":\"Rent\",\"relationName\":\"RentToVan\"},{\"name\":\"userInfo\",\"kind\":\"object\",\"type\":\"UserInfo\",\"relationName\":\"UserInfoToVan\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"}],\"dbName\":null}},\"enums\":{},\"types\":{}}")
defineDmmfProperty(exports.Prisma, config.runtimeDataModel)
config.engineWasm = undefined
config.compilerWasm = {
  getRuntime: async () => require('./query_compiler_bg.js'),
  getQueryCompilerWasmModule: async () => {
    const loader = (await import('#wasm-compiler-loader')).default
    const compiler = (await loader).default
    return compiler
  }
}

config.injectableEdgeEnv = () => ({
  parsed: {
    DATABASE_URL: typeof globalThis !== 'undefined' && globalThis['DATABASE_URL'] || typeof process !== 'undefined' && process.env && process.env.DATABASE_URL || undefined
  }
})

if (typeof globalThis !== 'undefined' && globalThis['DEBUG'] || typeof process !== 'undefined' && process.env && process.env.DEBUG || undefined) {
  Debug.enable(typeof globalThis !== 'undefined' && globalThis['DEBUG'] || typeof process !== 'undefined' && process.env && process.env.DEBUG || undefined)
}

const PrismaClient = getPrismaClient(config)
exports.PrismaClient = PrismaClient
Object.assign(exports, Prisma)

